/**
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnyOf from '../model/AnyOf';
import HTTPValidationError from '../model/HTTPValidationError';
import Order from '../model/Order';
import OrderPost from '../model/OrderPost';
import OrderPostResponseInput from '../model/OrderPostResponseInput';
import OrderPostResponseOutput from '../model/OrderPostResponseOutput';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOrderCacheOrdersCacheOrderIdGet operation.
     * @callback module:api/OrdersApi~getOrderCacheOrdersCacheOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderPostResponseInput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order Cache
     * :raises:
     * @param {String} orderId 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] 
     * @param {Number} [length = 20)] 
     * @param {module:api/OrdersApi~getOrderCacheOrdersCacheOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderPostResponseInput}
     */
    getOrderCacheOrdersCacheOrderIdGet(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderCacheOrdersCacheOrderIdGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        'offset': opts['offset'],
        'length': opts['length']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderPostResponseInput;
      return this.apiClient.callApi(
        '/orders/cache/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderOrdersOrderIdGet operation.
     * @callback module:api/OrdersApi~getOrderOrdersOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order
     * @param {String} orderId 
     * @param {module:api/OrdersApi~getOrderOrdersOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    getOrderOrdersOrderIdGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderOrdersOrderIdGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllOrdersOrdersGet operation.
     * @callback module:api/OrdersApi~listAllOrdersOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Orders
     * @param {Object} opts Optional parameters
     * @param {String} [firstName] First name, case insensitive
     * @param {String} [lastName] First name, case insensitive
     * @param {String} [customerId] Match on customer
     * @param {String} [subAccountId] Match on sub-account
     * @param {Date} [createdAtFrom] Filter by order submission time
     * @param {Date} [createdAtTo] Filter by order submission time
     * @param {String} [clientReference] Contained in client reference, case insensitive
     * @param {String} [fips] Match on requested FIPS code
     * @param {String} [region] Match on requested region code
     * @param {module:model/AnyOf} [sort] Sorted field and sort direction, separated by colon. Ascending = 1, Descending = -1
     * @param {Number} [limit] Limit results to this many matches
     * @param {module:api/OrdersApi~listAllOrdersOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    listAllOrdersOrdersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'customer_id': opts['customerId'],
        'sub_account_id': opts['subAccountId'],
        'created_at_from': opts['createdAtFrom'],
        'created_at_to': opts['createdAtTo'],
        'client_reference': opts['clientReference'],
        'fips': opts['fips'],
        'region': opts['region'],
        'sort': opts['sort'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];
      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrderOrdersPost operation.
     * @callback module:api/OrdersApi~postOrderOrdersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderPostResponseOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post Order
     * @param {module:model/OrderPost} orderPost 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [paginate] 
     * @param {module:api/OrdersApi~postOrderOrdersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderPostResponseOutput}
     */
    postOrderOrdersPost(orderPost, opts, callback) {
      opts = opts || {};
      let postBody = orderPost;
      // verify the required parameter 'orderPost' is set
      if (orderPost === undefined || orderPost === null) {
        throw new Error("Missing the required parameter 'orderPost' when calling postOrderOrdersPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'paginate': opts['paginate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderPostResponseOutput;
      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
