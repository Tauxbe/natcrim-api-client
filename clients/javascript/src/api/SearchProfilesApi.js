/**
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Profile from '../model/Profile';
import ProfilePut from '../model/ProfilePut';

/**
* SearchProfiles service.
* @module api/SearchProfilesApi
* @version 1.0.0
*/
export default class SearchProfilesApi {

    /**
    * Constructs a new SearchProfilesApi. 
    * @alias module:api/SearchProfilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete operation.
     * @callback module:api/SearchProfilesApi~deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a search profile
     * Delete a search profile
     * @param {String} customerId 
     * @param {String} profileId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Boolean} [isDeleted = false)] Delete a profile on a deleted customer
     * @param {module:api/SearchProfilesApi~deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete(customerId, profileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete");
      }

      let pathParams = {
        'customer_id': customerId,
        'profile_id': profileId
      };
      let queryParams = {
        'is_deleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/customers/{customer_id}/profiles/{profile_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileByIdCustomersCustomerIdProfilesProfileIdGet operation.
     * @callback module:api/SearchProfilesApi~getProfileByIdCustomersCustomerIdProfilesProfileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a search profile
     * Retrieve a search profile
     * @param {String} customerId 
     * @param {String} profileId 
     * @param {module:api/SearchProfilesApi~getProfileByIdCustomersCustomerIdProfilesProfileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    getProfileByIdCustomersCustomerIdProfilesProfileIdGet(customerId, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getProfileByIdCustomersCustomerIdProfilesProfileIdGet");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getProfileByIdCustomersCustomerIdProfilesProfileIdGet");
      }

      let pathParams = {
        'customer_id': customerId,
        'profile_id': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/customers/{customer_id}/profiles/{profile_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfilesCustomersCustomerIdProfilesGet operation.
     * @callback module:api/SearchProfilesApi~getProfilesCustomersCustomerIdProfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Profile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all search profiles
     * Retrieve all search profiles
     * @param {String} customerId 
     * @param {Object} opts Optional parameters
     * @param {String} [prefix = '')] Search profile tag field by this prefix value
     * @param {module:model/Boolean} [isDeleted = false)] Whether to include deleted profiles in the result, in addition to active profiles
     * @param {module:api/SearchProfilesApi~getProfilesCustomersCustomerIdProfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Profile>}
     */
    getProfilesCustomersCustomerIdProfilesGet(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getProfilesCustomersCustomerIdProfilesGet");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        'prefix': opts['prefix'],
        'is_deleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Profile];
      return this.apiClient.callApi(
        '/customers/{customer_id}/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProfileByIdCustomersCustomerIdProfilesPost operation.
     * @callback module:api/SearchProfilesApi~postProfileByIdCustomersCustomerIdProfilesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a search profile
     * Create a search profile
     * @param {String} customerId 
     * @param {module:model/ProfilePut} profilePut 
     * @param {module:api/SearchProfilesApi~postProfileByIdCustomersCustomerIdProfilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    postProfileByIdCustomersCustomerIdProfilesPost(customerId, profilePut, callback) {
      let postBody = profilePut;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postProfileByIdCustomersCustomerIdProfilesPost");
      }
      // verify the required parameter 'profilePut' is set
      if (profilePut === undefined || profilePut === null) {
        throw new Error("Missing the required parameter 'profilePut' when calling postProfileByIdCustomersCustomerIdProfilesPost");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/customers/{customer_id}/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfileByIdCustomersCustomerIdProfilesProfileIdPut operation.
     * @callback module:api/SearchProfilesApi~putProfileByIdCustomersCustomerIdProfilesProfileIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a search profile
     * Update a search profile
     * @param {String} customerId 
     * @param {String} profileId 
     * @param {module:model/ProfilePut} profilePut 
     * @param {module:api/SearchProfilesApi~putProfileByIdCustomersCustomerIdProfilesProfileIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    putProfileByIdCustomersCustomerIdProfilesProfileIdPut(customerId, profileId, profilePut, callback) {
      let postBody = profilePut;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putProfileByIdCustomersCustomerIdProfilesProfileIdPut");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling putProfileByIdCustomersCustomerIdProfilesProfileIdPut");
      }
      // verify the required parameter 'profilePut' is set
      if (profilePut === undefined || profilePut === null) {
        throw new Error("Missing the required parameter 'profilePut' when calling putProfileByIdCustomersCustomerIdProfilesProfileIdPut");
      }

      let pathParams = {
        'customer_id': customerId,
        'profile_id': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBasic', 'HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/customers/{customer_id}/profiles/{profile_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
