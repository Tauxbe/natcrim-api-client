/**
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Customer model module.
 * @module model/Customer
 * @version 1.0.0
 */
class Customer {
    /**
     * Constructs a new <code>Customer</code>.
     * @alias module:model/Customer
     * @param id {String} 
     * @param name {String} Descriptive name of customer, such as their corporate entity name.
     * @param adminEmail {String} Administrator's email address. Also functions as a username.
     * @param isDeleted {Boolean} 
     */
    constructor(id, name, adminEmail, isDeleted) { 
        
        Customer.initialize(this, id, name, adminEmail, isDeleted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, adminEmail, isDeleted) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['admin_email'] = adminEmail;
        obj['is_deleted'] = isDeleted;
    }

    /**
     * Constructs a <code>Customer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Customer} obj Optional instance to populate.
     * @return {module:model/Customer} The populated <code>Customer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Customer();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('admin_email')) {
                obj['admin_email'] = ApiClient.convertToType(data['admin_email'], 'String');
            }
            if (data.hasOwnProperty('is_deleted')) {
                obj['is_deleted'] = ApiClient.convertToType(data['is_deleted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Customer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Customer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Customer.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['admin_email'] && !(typeof data['admin_email'] === 'string' || data['admin_email'] instanceof String)) {
            throw new Error("Expected the field `admin_email` to be a primitive type in the JSON string but got " + data['admin_email']);
        }

        return true;
    }


}

Customer.RequiredProperties = ["id", "name", "admin_email", "is_deleted"];

/**
 * @member {String} id
 */
Customer.prototype['id'] = undefined;

/**
 * Descriptive name of customer, such as their corporate entity name.
 * @member {String} name
 */
Customer.prototype['name'] = undefined;

/**
 * Administrator's email address. Also functions as a username.
 * @member {String} admin_email
 */
Customer.prototype['admin_email'] = undefined;

/**
 * @member {Boolean} is_deleted
 */
Customer.prototype['is_deleted'] = undefined;






export default Customer;

