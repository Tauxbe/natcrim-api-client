# coding: utf-8

"""
    NatCrim Service Integration

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.3.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from natcrim_api_client.models.client_reference import ClientReference
from natcrim_api_client.models.fips import Fips
from natcrim_api_client.models.max_results import MaxResults
from natcrim_api_client.models.order_subject import OrderSubject
from natcrim_api_client.models.profile_definition_get import ProfileDefinitionGet
from natcrim_api_client.models.profile_id import ProfileId
from natcrim_api_client.models.region import Region
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrderRequestGet(BaseModel):
    """
    OrderRequestGet
    """ # noqa: E501
    client_reference: ClientReference
    profile_id: ProfileId
    profile_def: ProfileDefinitionGet
    fips: Optional[Fips] = None
    region: Optional[Region] = None
    subject: OrderSubject
    max_results: Optional[MaxResults] = None
    __properties: ClassVar[List[str]] = ["client_reference", "profile_id", "profile_def", "fips", "region", "subject", "max_results"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderRequestGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_reference
        if self.client_reference:
            _dict['client_reference'] = self.client_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_id
        if self.profile_id:
            _dict['profile_id'] = self.profile_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_def
        if self.profile_def:
            _dict['profile_def'] = self.profile_def.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fips
        if self.fips:
            _dict['fips'] = self.fips.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_results
        if self.max_results:
            _dict['max_results'] = self.max_results.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrderRequestGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_reference": ClientReference.from_dict(obj.get("client_reference")) if obj.get("client_reference") is not None else None,
            "profile_id": ProfileId.from_dict(obj.get("profile_id")) if obj.get("profile_id") is not None else None,
            "profile_def": ProfileDefinitionGet.from_dict(obj.get("profile_def")) if obj.get("profile_def") is not None else None,
            "fips": Fips.from_dict(obj.get("fips")) if obj.get("fips") is not None else None,
            "region": Region.from_dict(obj.get("region")) if obj.get("region") is not None else None,
            "subject": OrderSubject.from_dict(obj.get("subject")) if obj.get("subject") is not None else None,
            "max_results": MaxResults.from_dict(obj.get("max_results")) if obj.get("max_results") is not None else None
        })
        return _obj


