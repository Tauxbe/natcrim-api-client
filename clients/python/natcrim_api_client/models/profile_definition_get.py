# coding: utf-8

"""
    NatCrim Service Integration

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.3.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from natcrim_api_client.models.dob_filter_get import DOBFilterGet
from natcrim_api_client.models.name_filter_get import NameFilterGet
from natcrim_api_client.models.profile_max_age import ProfileMaxAge
from natcrim_api_client.models.source_types import SourceTypes
from natcrim_api_client.models.tag import Tag
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProfileDefinitionGet(BaseModel):
    """
    ProfileDefinitionGet
    """ # noqa: E501
    tag: Optional[Tag] = None
    first_name: NameFilterGet
    middle_name: NameFilterGet
    last_name: NameFilterGet
    dob: DOBFilterGet
    source_types: Optional[SourceTypes] = None
    max_age: Optional[ProfileMaxAge] = None
    __properties: ClassVar[List[str]] = ["tag", "first_name", "middle_name", "last_name", "dob", "source_types", "max_age"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProfileDefinitionGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tag
        if self.tag:
            _dict['tag'] = self.tag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_name
        if self.first_name:
            _dict['first_name'] = self.first_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of middle_name
        if self.middle_name:
            _dict['middle_name'] = self.middle_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_name
        if self.last_name:
            _dict['last_name'] = self.last_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dob
        if self.dob:
            _dict['dob'] = self.dob.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_types
        if self.source_types:
            _dict['source_types'] = self.source_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_age
        if self.max_age:
            _dict['max_age'] = self.max_age.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProfileDefinitionGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tag": Tag.from_dict(obj.get("tag")) if obj.get("tag") is not None else None,
            "first_name": NameFilterGet.from_dict(obj.get("first_name")) if obj.get("first_name") is not None else None,
            "middle_name": NameFilterGet.from_dict(obj.get("middle_name")) if obj.get("middle_name") is not None else None,
            "last_name": NameFilterGet.from_dict(obj.get("last_name")) if obj.get("last_name") is not None else None,
            "dob": DOBFilterGet.from_dict(obj.get("dob")) if obj.get("dob") is not None else None,
            "source_types": SourceTypes.from_dict(obj.get("source_types")) if obj.get("source_types") is not None else None,
            "max_age": ProfileMaxAge.from_dict(obj.get("max_age")) if obj.get("max_age") is not None else None
        })
        return _obj


