/*
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClientReference;
import org.openapitools.client.model.Fips;
import org.openapitools.client.model.MaxResults1;
import org.openapitools.client.model.OrderRequestPostProfileDef;
import org.openapitools.client.model.OrderSubject;
import org.openapitools.client.model.ProfileId1;
import org.openapitools.client.model.Region;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.natcrim.api.client.JSON;

/**
 * OrderRequestPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-11-01T03:07:42.294531Z[Etc/UTC]")
public class OrderRequestPost {
  public static final String SERIALIZED_NAME_CLIENT_REFERENCE = "client_reference";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCE)
  private ClientReference clientReference;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profile_id";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private ProfileId1 profileId;

  public static final String SERIALIZED_NAME_PROFILE_DEF = "profile_def";
  @SerializedName(SERIALIZED_NAME_PROFILE_DEF)
  private OrderRequestPostProfileDef profileDef;

  public static final String SERIALIZED_NAME_FIPS = "fips";
  @SerializedName(SERIALIZED_NAME_FIPS)
  private Fips fips = 00000;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private Region region;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private OrderSubject subject;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "max_results";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private MaxResults1 maxResults = 200;

  public OrderRequestPost() {
  }

  public OrderRequestPost clientReference(ClientReference clientReference) {
    
    this.clientReference = clientReference;
    return this;
  }

   /**
   * Get clientReference
   * @return clientReference
  **/
  @javax.annotation.Nullable
  public ClientReference getClientReference() {
    return clientReference;
  }


  public void setClientReference(ClientReference clientReference) {
    this.clientReference = clientReference;
  }


  public OrderRequestPost profileId(ProfileId1 profileId) {
    
    this.profileId = profileId;
    return this;
  }

   /**
   * Get profileId
   * @return profileId
  **/
  @javax.annotation.Nullable
  public ProfileId1 getProfileId() {
    return profileId;
  }


  public void setProfileId(ProfileId1 profileId) {
    this.profileId = profileId;
  }


  public OrderRequestPost profileDef(OrderRequestPostProfileDef profileDef) {
    
    this.profileDef = profileDef;
    return this;
  }

   /**
   * Get profileDef
   * @return profileDef
  **/
  @javax.annotation.Nullable
  public OrderRequestPostProfileDef getProfileDef() {
    return profileDef;
  }


  public void setProfileDef(OrderRequestPostProfileDef profileDef) {
    this.profileDef = profileDef;
  }


  public OrderRequestPost fips(Fips fips) {
    
    this.fips = fips;
    return this;
  }

   /**
   * Get fips
   * @return fips
  **/
  @javax.annotation.Nullable
  public Fips getFips() {
    return fips;
  }


  public void setFips(Fips fips) {
    this.fips = fips;
  }


  public OrderRequestPost region(Region region) {
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  public Region getRegion() {
    return region;
  }


  public void setRegion(Region region) {
    this.region = region;
  }


  public OrderRequestPost subject(OrderSubject subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nonnull
  public OrderSubject getSubject() {
    return subject;
  }


  public void setSubject(OrderSubject subject) {
    this.subject = subject;
  }


  public OrderRequestPost maxResults(MaxResults1 maxResults) {
    
    this.maxResults = maxResults;
    return this;
  }

   /**
   * Get maxResults
   * @return maxResults
  **/
  @javax.annotation.Nullable
  public MaxResults1 getMaxResults() {
    return maxResults;
  }


  public void setMaxResults(MaxResults1 maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderRequestPost orderRequestPost = (OrderRequestPost) o;
    return Objects.equals(this.clientReference, orderRequestPost.clientReference) &&
        Objects.equals(this.profileId, orderRequestPost.profileId) &&
        Objects.equals(this.profileDef, orderRequestPost.profileDef) &&
        Objects.equals(this.fips, orderRequestPost.fips) &&
        Objects.equals(this.region, orderRequestPost.region) &&
        Objects.equals(this.subject, orderRequestPost.subject) &&
        Objects.equals(this.maxResults, orderRequestPost.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientReference, profileId, profileDef, fips, region, subject, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderRequestPost {\n");
    sb.append("    clientReference: ").append(toIndentedString(clientReference)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    profileDef: ").append(toIndentedString(profileDef)).append("\n");
    sb.append("    fips: ").append(toIndentedString(fips)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_reference");
    openapiFields.add("profile_id");
    openapiFields.add("profile_def");
    openapiFields.add("fips");
    openapiFields.add("region");
    openapiFields.add("subject");
    openapiFields.add("max_results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subject");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderRequestPost
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderRequestPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderRequestPost is not found in the empty JSON string", OrderRequestPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderRequestPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderRequestPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderRequestPost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `client_reference`
      if (jsonObj.get("client_reference") != null && !jsonObj.get("client_reference").isJsonNull()) {
        ClientReference.validateJsonElement(jsonObj.get("client_reference"));
      }
      // validate the optional field `profile_id`
      if (jsonObj.get("profile_id") != null && !jsonObj.get("profile_id").isJsonNull()) {
        ProfileId1.validateJsonElement(jsonObj.get("profile_id"));
      }
      // validate the optional field `profile_def`
      if (jsonObj.get("profile_def") != null && !jsonObj.get("profile_def").isJsonNull()) {
        OrderRequestPostProfileDef.validateJsonElement(jsonObj.get("profile_def"));
      }
      // validate the optional field `fips`
      if (jsonObj.get("fips") != null && !jsonObj.get("fips").isJsonNull()) {
        Fips.validateJsonElement(jsonObj.get("fips"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        Region.validateJsonElement(jsonObj.get("region"));
      }
      // validate the required field `subject`
      OrderSubject.validateJsonElement(jsonObj.get("subject"));
      // validate the optional field `max_results`
      if (jsonObj.get("max_results") != null && !jsonObj.get("max_results").isJsonNull()) {
        MaxResults1.validateJsonElement(jsonObj.get("max_results"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderRequestPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderRequestPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderRequestPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderRequestPost.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderRequestPost>() {
           @Override
           public void write(JsonWriter out, OrderRequestPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderRequestPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderRequestPost given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderRequestPost
  * @throws IOException if the JSON string is invalid with respect to OrderRequestPost
  */
  public static OrderRequestPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderRequestPost.class);
  }

 /**
  * Convert an instance of OrderRequestPost to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

