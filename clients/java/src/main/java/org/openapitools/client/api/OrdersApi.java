/*
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.natcrim.api.client.ApiCallback;
import com.natcrim.api.client.ApiClient;
import com.natcrim.api.client.ApiException;
import com.natcrim.api.client.ApiResponse;
import com.natcrim.api.client.Configuration;
import com.natcrim.api.client.Pair;
import com.natcrim.api.client.ProgressRequestBody;
import com.natcrim.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnyOf;
import org.openapitools.client.model.HTTPValidationError;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrderPost;
import org.openapitools.client.model.OrderPostResponseInput;
import org.openapitools.client.model.OrderPostResponseOutput;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrderCacheOrdersCacheOrderIdGet
     * @param orderId  (required)
     * @param offset  (optional, default to 0)
     * @param length  (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cached results </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Results no longer available </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderCacheOrdersCacheOrderIdGetCall(UUID orderId, Integer offset, Integer length, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/cache/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderCacheOrdersCacheOrderIdGetValidateBeforeCall(UUID orderId, Integer offset, Integer length, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderCacheOrdersCacheOrderIdGet(Async)");
        }

        return getOrderCacheOrdersCacheOrderIdGetCall(orderId, offset, length, _callback);

    }

    /**
     * Get Order Cache
     * :raises:
     * @param orderId  (required)
     * @param offset  (optional, default to 0)
     * @param length  (optional, default to 20)
     * @return OrderPostResponseInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cached results </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Results no longer available </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OrderPostResponseInput getOrderCacheOrdersCacheOrderIdGet(UUID orderId, Integer offset, Integer length) throws ApiException {
        ApiResponse<OrderPostResponseInput> localVarResp = getOrderCacheOrdersCacheOrderIdGetWithHttpInfo(orderId, offset, length);
        return localVarResp.getData();
    }

    /**
     * Get Order Cache
     * :raises:
     * @param orderId  (required)
     * @param offset  (optional, default to 0)
     * @param length  (optional, default to 20)
     * @return ApiResponse&lt;OrderPostResponseInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cached results </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Results no longer available </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderPostResponseInput> getOrderCacheOrdersCacheOrderIdGetWithHttpInfo(UUID orderId, Integer offset, Integer length) throws ApiException {
        okhttp3.Call localVarCall = getOrderCacheOrdersCacheOrderIdGetValidateBeforeCall(orderId, offset, length, null);
        Type localVarReturnType = new TypeToken<OrderPostResponseInput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Cache (asynchronously)
     * :raises:
     * @param orderId  (required)
     * @param offset  (optional, default to 0)
     * @param length  (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cached results </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Results no longer available </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderCacheOrdersCacheOrderIdGetAsync(UUID orderId, Integer offset, Integer length, final ApiCallback<OrderPostResponseInput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderCacheOrdersCacheOrderIdGetValidateBeforeCall(orderId, offset, length, _callback);
        Type localVarReturnType = new TypeToken<OrderPostResponseInput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderOrdersOrderIdGet
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order detail without search response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderOrdersOrderIdGetCall(UUID orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderOrdersOrderIdGetValidateBeforeCall(UUID orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderOrdersOrderIdGet(Async)");
        }

        return getOrderOrdersOrderIdGetCall(orderId, _callback);

    }

    /**
     * Get Order
     * 
     * @param orderId  (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order detail without search response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Order getOrderOrdersOrderIdGet(UUID orderId) throws ApiException {
        ApiResponse<Order> localVarResp = getOrderOrdersOrderIdGetWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Order
     * 
     * @param orderId  (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order detail without search response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> getOrderOrdersOrderIdGetWithHttpInfo(UUID orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderOrdersOrderIdGetValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order (asynchronously)
     * 
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order detail without search response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderOrdersOrderIdGetAsync(UUID orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderOrdersOrderIdGetValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllOrdersOrdersGet
     * @param firstName First name, case insensitive (optional)
     * @param lastName First name, case insensitive (optional)
     * @param customerId Match on customer (optional)
     * @param subAccountId Match on sub-account (optional)
     * @param createdAtFrom Filter by order submission time (optional)
     * @param createdAtTo Filter by order submission time (optional)
     * @param clientReference Contained in client reference, case insensitive (optional)
     * @param fips Match on requested FIPS code (optional)
     * @param region Match on requested region code (optional)
     * @param sort Sorted field and sort direction, separated by colon. Ascending &#x3D; 1, Descending &#x3D; -1 (optional)
     * @param limit Limit results to this many matches (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List submitted orders </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllOrdersOrdersGetCall(String firstName, String lastName, UUID customerId, UUID subAccountId, OffsetDateTime createdAtFrom, OffsetDateTime createdAtTo, String clientReference, String fips, String region, AnyOf sort, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (subAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_account_id", subAccountId));
        }

        if (createdAtFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_from", createdAtFrom));
        }

        if (createdAtTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_to", createdAtTo));
        }

        if (clientReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_reference", clientReference));
        }

        if (fips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fips", fips));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllOrdersOrdersGetValidateBeforeCall(String firstName, String lastName, UUID customerId, UUID subAccountId, OffsetDateTime createdAtFrom, OffsetDateTime createdAtTo, String clientReference, String fips, String region, AnyOf sort, Integer limit, final ApiCallback _callback) throws ApiException {
        return listAllOrdersOrdersGetCall(firstName, lastName, customerId, subAccountId, createdAtFrom, createdAtTo, clientReference, fips, region, sort, limit, _callback);

    }

    /**
     * List All Orders
     * 
     * @param firstName First name, case insensitive (optional)
     * @param lastName First name, case insensitive (optional)
     * @param customerId Match on customer (optional)
     * @param subAccountId Match on sub-account (optional)
     * @param createdAtFrom Filter by order submission time (optional)
     * @param createdAtTo Filter by order submission time (optional)
     * @param clientReference Contained in client reference, case insensitive (optional)
     * @param fips Match on requested FIPS code (optional)
     * @param region Match on requested region code (optional)
     * @param sort Sorted field and sort direction, separated by colon. Ascending &#x3D; 1, Descending &#x3D; -1 (optional)
     * @param limit Limit results to this many matches (optional)
     * @return List&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List submitted orders </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Order> listAllOrdersOrdersGet(String firstName, String lastName, UUID customerId, UUID subAccountId, OffsetDateTime createdAtFrom, OffsetDateTime createdAtTo, String clientReference, String fips, String region, AnyOf sort, Integer limit) throws ApiException {
        ApiResponse<List<Order>> localVarResp = listAllOrdersOrdersGetWithHttpInfo(firstName, lastName, customerId, subAccountId, createdAtFrom, createdAtTo, clientReference, fips, region, sort, limit);
        return localVarResp.getData();
    }

    /**
     * List All Orders
     * 
     * @param firstName First name, case insensitive (optional)
     * @param lastName First name, case insensitive (optional)
     * @param customerId Match on customer (optional)
     * @param subAccountId Match on sub-account (optional)
     * @param createdAtFrom Filter by order submission time (optional)
     * @param createdAtTo Filter by order submission time (optional)
     * @param clientReference Contained in client reference, case insensitive (optional)
     * @param fips Match on requested FIPS code (optional)
     * @param region Match on requested region code (optional)
     * @param sort Sorted field and sort direction, separated by colon. Ascending &#x3D; 1, Descending &#x3D; -1 (optional)
     * @param limit Limit results to this many matches (optional)
     * @return ApiResponse&lt;List&lt;Order&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List submitted orders </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Order>> listAllOrdersOrdersGetWithHttpInfo(String firstName, String lastName, UUID customerId, UUID subAccountId, OffsetDateTime createdAtFrom, OffsetDateTime createdAtTo, String clientReference, String fips, String region, AnyOf sort, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAllOrdersOrdersGetValidateBeforeCall(firstName, lastName, customerId, subAccountId, createdAtFrom, createdAtTo, clientReference, fips, region, sort, limit, null);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Orders (asynchronously)
     * 
     * @param firstName First name, case insensitive (optional)
     * @param lastName First name, case insensitive (optional)
     * @param customerId Match on customer (optional)
     * @param subAccountId Match on sub-account (optional)
     * @param createdAtFrom Filter by order submission time (optional)
     * @param createdAtTo Filter by order submission time (optional)
     * @param clientReference Contained in client reference, case insensitive (optional)
     * @param fips Match on requested FIPS code (optional)
     * @param region Match on requested region code (optional)
     * @param sort Sorted field and sort direction, separated by colon. Ascending &#x3D; 1, Descending &#x3D; -1 (optional)
     * @param limit Limit results to this many matches (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List submitted orders </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllOrdersOrdersGetAsync(String firstName, String lastName, UUID customerId, UUID subAccountId, OffsetDateTime createdAtFrom, OffsetDateTime createdAtTo, String clientReference, String fips, String region, AnyOf sort, Integer limit, final ApiCallback<List<Order>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllOrdersOrdersGetValidateBeforeCall(firstName, lastName, customerId, subAccountId, createdAtFrom, createdAtTo, clientReference, fips, region, sort, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrderOrdersPost
     * @param orderPost  (required)
     * @param paginate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrderOrdersPostCall(OrderPost orderPost, Boolean paginate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderPost;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate", paginate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrderOrdersPostValidateBeforeCall(OrderPost orderPost, Boolean paginate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderPost' is set
        if (orderPost == null) {
            throw new ApiException("Missing the required parameter 'orderPost' when calling postOrderOrdersPost(Async)");
        }

        return postOrderOrdersPostCall(orderPost, paginate, _callback);

    }

    /**
     * Post Order
     * 
     * @param orderPost  (required)
     * @param paginate  (optional)
     * @return OrderPostResponseOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OrderPostResponseOutput postOrderOrdersPost(OrderPost orderPost, Boolean paginate) throws ApiException {
        ApiResponse<OrderPostResponseOutput> localVarResp = postOrderOrdersPostWithHttpInfo(orderPost, paginate);
        return localVarResp.getData();
    }

    /**
     * Post Order
     * 
     * @param orderPost  (required)
     * @param paginate  (optional)
     * @return ApiResponse&lt;OrderPostResponseOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderPostResponseOutput> postOrderOrdersPostWithHttpInfo(OrderPost orderPost, Boolean paginate) throws ApiException {
        okhttp3.Call localVarCall = postOrderOrdersPostValidateBeforeCall(orderPost, paginate, null);
        Type localVarReturnType = new TypeToken<OrderPostResponseOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post Order (asynchronously)
     * 
     * @param orderPost  (required)
     * @param paginate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrderOrdersPostAsync(OrderPost orderPost, Boolean paginate, final ApiCallback<OrderPostResponseOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrderOrdersPostValidateBeforeCall(orderPost, paginate, _callback);
        Type localVarReturnType = new TypeToken<OrderPostResponseOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
