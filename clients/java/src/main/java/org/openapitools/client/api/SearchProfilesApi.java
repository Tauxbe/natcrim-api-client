/*
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.natcrim.api.client.ApiCallback;
import com.natcrim.api.client.ApiClient;
import com.natcrim.api.client.ApiException;
import com.natcrim.api.client.ApiResponse;
import com.natcrim.api.client.Configuration;
import com.natcrim.api.client.Pair;
import com.natcrim.api.client.ProgressRequestBody;
import com.natcrim.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ProfilePut;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete
     * @param customerId  (required)
     * @param profileId  (required)
     * @param isDeleted Delete a profile on a deleted customer (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteCall(UUID customerId, UUID profileId, Boolean isDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/profiles/{profile_id}"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_deleted", isDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteValidateBeforeCall(UUID customerId, UUID profileId, Boolean isDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete(Async)");
        }

        return deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteCall(customerId, profileId, isDeleted, _callback);

    }

    /**
     * Delete a search profile
     * Delete a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @param isDeleted Delete a profile on a deleted customer (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDelete(UUID customerId, UUID profileId, Boolean isDeleted) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteWithHttpInfo(customerId, profileId, isDeleted);
        return localVarResp.getData();
    }

    /**
     * Delete a search profile
     * Delete a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @param isDeleted Delete a profile on a deleted customer (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteWithHttpInfo(UUID customerId, UUID profileId, Boolean isDeleted) throws ApiException {
        okhttp3.Call localVarCall = deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteValidateBeforeCall(customerId, profileId, isDeleted, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a search profile (asynchronously)
     * Delete a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @param isDeleted Delete a profile on a deleted customer (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteAsync(UUID customerId, UUID profileId, Boolean isDeleted, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSearchProfileByIdCustomersCustomerIdProfilesProfileIdDeleteValidateBeforeCall(customerId, profileId, isDeleted, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfileByIdCustomersCustomerIdProfilesProfileIdGet
     * @param customerId  (required)
     * @param profileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileByIdCustomersCustomerIdProfilesProfileIdGetCall(UUID customerId, UUID profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/profiles/{profile_id}"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileByIdCustomersCustomerIdProfilesProfileIdGetValidateBeforeCall(UUID customerId, UUID profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getProfileByIdCustomersCustomerIdProfilesProfileIdGet(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getProfileByIdCustomersCustomerIdProfilesProfileIdGet(Async)");
        }

        return getProfileByIdCustomersCustomerIdProfilesProfileIdGetCall(customerId, profileId, _callback);

    }

    /**
     * Retrieve a search profile
     * Retrieve a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Profile getProfileByIdCustomersCustomerIdProfilesProfileIdGet(UUID customerId, UUID profileId) throws ApiException {
        ApiResponse<Profile> localVarResp = getProfileByIdCustomersCustomerIdProfilesProfileIdGetWithHttpInfo(customerId, profileId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a search profile
     * Retrieve a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> getProfileByIdCustomersCustomerIdProfilesProfileIdGetWithHttpInfo(UUID customerId, UUID profileId) throws ApiException {
        okhttp3.Call localVarCall = getProfileByIdCustomersCustomerIdProfilesProfileIdGetValidateBeforeCall(customerId, profileId, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a search profile (asynchronously)
     * Retrieve a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileByIdCustomersCustomerIdProfilesProfileIdGetAsync(UUID customerId, UUID profileId, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileByIdCustomersCustomerIdProfilesProfileIdGetValidateBeforeCall(customerId, profileId, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfilesCustomersCustomerIdProfilesGet
     * @param customerId  (required)
     * @param prefix Search profile tag field by this prefix value (optional, default to )
     * @param isDeleted Whether to include deleted profiles in the result, in addition to active profiles (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of profiles of customer </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfilesCustomersCustomerIdProfilesGetCall(UUID customerId, String prefix, Boolean isDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/profiles"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (isDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_deleted", isDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfilesCustomersCustomerIdProfilesGetValidateBeforeCall(UUID customerId, String prefix, Boolean isDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getProfilesCustomersCustomerIdProfilesGet(Async)");
        }

        return getProfilesCustomersCustomerIdProfilesGetCall(customerId, prefix, isDeleted, _callback);

    }

    /**
     * Retrieve all search profiles
     * Retrieve all search profiles
     * @param customerId  (required)
     * @param prefix Search profile tag field by this prefix value (optional, default to )
     * @param isDeleted Whether to include deleted profiles in the result, in addition to active profiles (optional, default to false)
     * @return List&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of profiles of customer </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Profile> getProfilesCustomersCustomerIdProfilesGet(UUID customerId, String prefix, Boolean isDeleted) throws ApiException {
        ApiResponse<List<Profile>> localVarResp = getProfilesCustomersCustomerIdProfilesGetWithHttpInfo(customerId, prefix, isDeleted);
        return localVarResp.getData();
    }

    /**
     * Retrieve all search profiles
     * Retrieve all search profiles
     * @param customerId  (required)
     * @param prefix Search profile tag field by this prefix value (optional, default to )
     * @param isDeleted Whether to include deleted profiles in the result, in addition to active profiles (optional, default to false)
     * @return ApiResponse&lt;List&lt;Profile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of profiles of customer </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Profile>> getProfilesCustomersCustomerIdProfilesGetWithHttpInfo(UUID customerId, String prefix, Boolean isDeleted) throws ApiException {
        okhttp3.Call localVarCall = getProfilesCustomersCustomerIdProfilesGetValidateBeforeCall(customerId, prefix, isDeleted, null);
        Type localVarReturnType = new TypeToken<List<Profile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all search profiles (asynchronously)
     * Retrieve all search profiles
     * @param customerId  (required)
     * @param prefix Search profile tag field by this prefix value (optional, default to )
     * @param isDeleted Whether to include deleted profiles in the result, in addition to active profiles (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of profiles of customer </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfilesCustomersCustomerIdProfilesGetAsync(UUID customerId, String prefix, Boolean isDeleted, final ApiCallback<List<Profile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfilesCustomersCustomerIdProfilesGetValidateBeforeCall(customerId, prefix, isDeleted, _callback);
        Type localVarReturnType = new TypeToken<List<Profile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postProfileByIdCustomersCustomerIdProfilesPost
     * @param customerId  (required)
     * @param profilePut  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postProfileByIdCustomersCustomerIdProfilesPostCall(UUID customerId, ProfilePut profilePut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profilePut;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/profiles"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postProfileByIdCustomersCustomerIdProfilesPostValidateBeforeCall(UUID customerId, ProfilePut profilePut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling postProfileByIdCustomersCustomerIdProfilesPost(Async)");
        }

        // verify the required parameter 'profilePut' is set
        if (profilePut == null) {
            throw new ApiException("Missing the required parameter 'profilePut' when calling postProfileByIdCustomersCustomerIdProfilesPost(Async)");
        }

        return postProfileByIdCustomersCustomerIdProfilesPostCall(customerId, profilePut, _callback);

    }

    /**
     * Create a search profile
     * Create a search profile
     * @param customerId  (required)
     * @param profilePut  (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Profile postProfileByIdCustomersCustomerIdProfilesPost(UUID customerId, ProfilePut profilePut) throws ApiException {
        ApiResponse<Profile> localVarResp = postProfileByIdCustomersCustomerIdProfilesPostWithHttpInfo(customerId, profilePut);
        return localVarResp.getData();
    }

    /**
     * Create a search profile
     * Create a search profile
     * @param customerId  (required)
     * @param profilePut  (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> postProfileByIdCustomersCustomerIdProfilesPostWithHttpInfo(UUID customerId, ProfilePut profilePut) throws ApiException {
        okhttp3.Call localVarCall = postProfileByIdCustomersCustomerIdProfilesPostValidateBeforeCall(customerId, profilePut, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a search profile (asynchronously)
     * Create a search profile
     * @param customerId  (required)
     * @param profilePut  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postProfileByIdCustomersCustomerIdProfilesPostAsync(UUID customerId, ProfilePut profilePut, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = postProfileByIdCustomersCustomerIdProfilesPostValidateBeforeCall(customerId, profilePut, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putProfileByIdCustomersCustomerIdProfilesProfileIdPut
     * @param customerId  (required)
     * @param profileId  (required)
     * @param profilePut  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putProfileByIdCustomersCustomerIdProfilesProfileIdPutCall(UUID customerId, UUID profileId, ProfilePut profilePut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profilePut;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/profiles/{profile_id}"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "profile_id" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBasic", "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putProfileByIdCustomersCustomerIdProfilesProfileIdPutValidateBeforeCall(UUID customerId, UUID profileId, ProfilePut profilePut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling putProfileByIdCustomersCustomerIdProfilesProfileIdPut(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling putProfileByIdCustomersCustomerIdProfilesProfileIdPut(Async)");
        }

        // verify the required parameter 'profilePut' is set
        if (profilePut == null) {
            throw new ApiException("Missing the required parameter 'profilePut' when calling putProfileByIdCustomersCustomerIdProfilesProfileIdPut(Async)");
        }

        return putProfileByIdCustomersCustomerIdProfilesProfileIdPutCall(customerId, profileId, profilePut, _callback);

    }

    /**
     * Update a search profile
     * Update a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @param profilePut  (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Profile putProfileByIdCustomersCustomerIdProfilesProfileIdPut(UUID customerId, UUID profileId, ProfilePut profilePut) throws ApiException {
        ApiResponse<Profile> localVarResp = putProfileByIdCustomersCustomerIdProfilesProfileIdPutWithHttpInfo(customerId, profileId, profilePut);
        return localVarResp.getData();
    }

    /**
     * Update a search profile
     * Update a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @param profilePut  (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> putProfileByIdCustomersCustomerIdProfilesProfileIdPutWithHttpInfo(UUID customerId, UUID profileId, ProfilePut profilePut) throws ApiException {
        okhttp3.Call localVarCall = putProfileByIdCustomersCustomerIdProfilesProfileIdPutValidateBeforeCall(customerId, profileId, profilePut, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a search profile (asynchronously)
     * Update a search profile
     * @param customerId  (required)
     * @param profileId  (required)
     * @param profilePut  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putProfileByIdCustomersCustomerIdProfilesProfileIdPutAsync(UUID customerId, UUID profileId, ProfilePut profilePut, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = putProfileByIdCustomersCustomerIdProfilesProfileIdPutValidateBeforeCall(customerId, profileId, profilePut, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
