/*
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.natcrim.api.client.JSON;

/**
 * NameFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-13T03:05:46.696995Z[Etc/UTC]")
public class NameFilter {
  public static final String SERIALIZED_NAME_MATCH_REQUIRED = "match_required";
  @SerializedName(SERIALIZED_NAME_MATCH_REQUIRED)
  private Boolean matchRequired = true;

  public static final String SERIALIZED_NAME_MATCH_FIRST_LETTERS = "match_first_letters";
  @SerializedName(SERIALIZED_NAME_MATCH_FIRST_LETTERS)
  private Integer matchFirstLetters = 0;

  public static final String SERIALIZED_NAME_MATCH_BEGINS_WITH = "match_begins_with";
  @SerializedName(SERIALIZED_NAME_MATCH_BEGINS_WITH)
  private Boolean matchBeginsWith = false;

  public static final String SERIALIZED_NAME_MATCH_FULL_NAME = "match_full_name";
  @SerializedName(SERIALIZED_NAME_MATCH_FULL_NAME)
  private Boolean matchFullName = true;

  public NameFilter() {
  }

  public NameFilter matchRequired(Boolean matchRequired) {
    
    this.matchRequired = matchRequired;
    return this;
  }

   /**
   * Get matchRequired
   * @return matchRequired
  **/
  @javax.annotation.Nullable
  public Boolean getMatchRequired() {
    return matchRequired;
  }


  public void setMatchRequired(Boolean matchRequired) {
    this.matchRequired = matchRequired;
  }


  public NameFilter matchFirstLetters(Integer matchFirstLetters) {
    
    this.matchFirstLetters = matchFirstLetters;
    return this;
  }

   /**
   * Get matchFirstLetters
   * minimum: 0
   * maximum: 10
   * @return matchFirstLetters
  **/
  @javax.annotation.Nullable
  public Integer getMatchFirstLetters() {
    return matchFirstLetters;
  }


  public void setMatchFirstLetters(Integer matchFirstLetters) {
    this.matchFirstLetters = matchFirstLetters;
  }


  public NameFilter matchBeginsWith(Boolean matchBeginsWith) {
    
    this.matchBeginsWith = matchBeginsWith;
    return this;
  }

   /**
   * Get matchBeginsWith
   * @return matchBeginsWith
  **/
  @javax.annotation.Nullable
  public Boolean getMatchBeginsWith() {
    return matchBeginsWith;
  }


  public void setMatchBeginsWith(Boolean matchBeginsWith) {
    this.matchBeginsWith = matchBeginsWith;
  }


  public NameFilter matchFullName(Boolean matchFullName) {
    
    this.matchFullName = matchFullName;
    return this;
  }

   /**
   * Get matchFullName
   * @return matchFullName
  **/
  @javax.annotation.Nullable
  public Boolean getMatchFullName() {
    return matchFullName;
  }


  public void setMatchFullName(Boolean matchFullName) {
    this.matchFullName = matchFullName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NameFilter nameFilter = (NameFilter) o;
    return Objects.equals(this.matchRequired, nameFilter.matchRequired) &&
        Objects.equals(this.matchFirstLetters, nameFilter.matchFirstLetters) &&
        Objects.equals(this.matchBeginsWith, nameFilter.matchBeginsWith) &&
        Objects.equals(this.matchFullName, nameFilter.matchFullName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchRequired, matchFirstLetters, matchBeginsWith, matchFullName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NameFilter {\n");
    sb.append("    matchRequired: ").append(toIndentedString(matchRequired)).append("\n");
    sb.append("    matchFirstLetters: ").append(toIndentedString(matchFirstLetters)).append("\n");
    sb.append("    matchBeginsWith: ").append(toIndentedString(matchBeginsWith)).append("\n");
    sb.append("    matchFullName: ").append(toIndentedString(matchFullName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("match_required");
    openapiFields.add("match_first_letters");
    openapiFields.add("match_begins_with");
    openapiFields.add("match_full_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NameFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NameFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NameFilter is not found in the empty JSON string", NameFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NameFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NameFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NameFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NameFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NameFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NameFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<NameFilter>() {
           @Override
           public void write(JsonWriter out, NameFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NameFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NameFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NameFilter
  * @throws IOException if the JSON string is invalid with respect to NameFilter
  */
  public static NameFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NameFilter.class);
  }

 /**
  * Convert an instance of NameFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

