/*
 * NatCrim Service Integration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DOBFilterGet;
import org.openapitools.client.model.NameFilterGet;
import org.openapitools.client.model.ProfileMaxAge;
import org.openapitools.client.model.SourceTypes;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.natcrim.api.client.JSON;

/**
 * ProfileDefinitionGet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-30T02:52:46.603677Z[Etc/UTC]")
public class ProfileDefinitionGet {
  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private Tag tag;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private NameFilterGet firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middle_name";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private NameFilterGet middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private NameFilterGet lastName;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private DOBFilterGet dob;

  public static final String SERIALIZED_NAME_SOURCE_TYPES = "source_types";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPES)
  private SourceTypes sourceTypes = [];

  public static final String SERIALIZED_NAME_MAX_AGE = "max_age";
  @SerializedName(SERIALIZED_NAME_MAX_AGE)
  private ProfileMaxAge maxAge = {age=99, max_age_field=filed};

  public ProfileDefinitionGet() {
  }

  public ProfileDefinitionGet tag(Tag tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nullable
  public Tag getTag() {
    return tag;
  }


  public void setTag(Tag tag) {
    this.tag = tag;
  }


  public ProfileDefinitionGet firstName(NameFilterGet firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nonnull
  public NameFilterGet getFirstName() {
    return firstName;
  }


  public void setFirstName(NameFilterGet firstName) {
    this.firstName = firstName;
  }


  public ProfileDefinitionGet middleName(NameFilterGet middleName) {
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nonnull
  public NameFilterGet getMiddleName() {
    return middleName;
  }


  public void setMiddleName(NameFilterGet middleName) {
    this.middleName = middleName;
  }


  public ProfileDefinitionGet lastName(NameFilterGet lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nonnull
  public NameFilterGet getLastName() {
    return lastName;
  }


  public void setLastName(NameFilterGet lastName) {
    this.lastName = lastName;
  }


  public ProfileDefinitionGet dob(DOBFilterGet dob) {
    
    this.dob = dob;
    return this;
  }

   /**
   * Get dob
   * @return dob
  **/
  @javax.annotation.Nonnull
  public DOBFilterGet getDob() {
    return dob;
  }


  public void setDob(DOBFilterGet dob) {
    this.dob = dob;
  }


  public ProfileDefinitionGet sourceTypes(SourceTypes sourceTypes) {
    
    this.sourceTypes = sourceTypes;
    return this;
  }

   /**
   * Get sourceTypes
   * @return sourceTypes
  **/
  @javax.annotation.Nullable
  public SourceTypes getSourceTypes() {
    return sourceTypes;
  }


  public void setSourceTypes(SourceTypes sourceTypes) {
    this.sourceTypes = sourceTypes;
  }


  public ProfileDefinitionGet maxAge(ProfileMaxAge maxAge) {
    
    this.maxAge = maxAge;
    return this;
  }

   /**
   * Get maxAge
   * @return maxAge
  **/
  @javax.annotation.Nullable
  public ProfileMaxAge getMaxAge() {
    return maxAge;
  }


  public void setMaxAge(ProfileMaxAge maxAge) {
    this.maxAge = maxAge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileDefinitionGet profileDefinitionGet = (ProfileDefinitionGet) o;
    return Objects.equals(this.tag, profileDefinitionGet.tag) &&
        Objects.equals(this.firstName, profileDefinitionGet.firstName) &&
        Objects.equals(this.middleName, profileDefinitionGet.middleName) &&
        Objects.equals(this.lastName, profileDefinitionGet.lastName) &&
        Objects.equals(this.dob, profileDefinitionGet.dob) &&
        Objects.equals(this.sourceTypes, profileDefinitionGet.sourceTypes) &&
        Objects.equals(this.maxAge, profileDefinitionGet.maxAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, firstName, middleName, lastName, dob, sourceTypes, maxAge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileDefinitionGet {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    sourceTypes: ").append(toIndentedString(sourceTypes)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tag");
    openapiFields.add("first_name");
    openapiFields.add("middle_name");
    openapiFields.add("last_name");
    openapiFields.add("dob");
    openapiFields.add("source_types");
    openapiFields.add("max_age");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("middle_name");
    openapiRequiredFields.add("last_name");
    openapiRequiredFields.add("dob");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProfileDefinitionGet
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileDefinitionGet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileDefinitionGet is not found in the empty JSON string", ProfileDefinitionGet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileDefinitionGet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileDefinitionGet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProfileDefinitionGet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        Tag.validateJsonElement(jsonObj.get("tag"));
      }
      // validate the required field `first_name`
      NameFilterGet.validateJsonElement(jsonObj.get("first_name"));
      // validate the required field `middle_name`
      NameFilterGet.validateJsonElement(jsonObj.get("middle_name"));
      // validate the required field `last_name`
      NameFilterGet.validateJsonElement(jsonObj.get("last_name"));
      // validate the required field `dob`
      DOBFilterGet.validateJsonElement(jsonObj.get("dob"));
      // validate the optional field `source_types`
      if (jsonObj.get("source_types") != null && !jsonObj.get("source_types").isJsonNull()) {
        SourceTypes.validateJsonElement(jsonObj.get("source_types"));
      }
      // validate the optional field `max_age`
      if (jsonObj.get("max_age") != null && !jsonObj.get("max_age").isJsonNull()) {
        ProfileMaxAge.validateJsonElement(jsonObj.get("max_age"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileDefinitionGet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileDefinitionGet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileDefinitionGet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileDefinitionGet.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileDefinitionGet>() {
           @Override
           public void write(JsonWriter out, ProfileDefinitionGet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileDefinitionGet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProfileDefinitionGet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProfileDefinitionGet
  * @throws IOException if the JSON string is invalid with respect to ProfileDefinitionGet
  */
  public static ProfileDefinitionGet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileDefinitionGet.class);
  }

 /**
  * Convert an instance of ProfileDefinitionGet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

